// 0.1 + 0.2 != 0.3
/*
  进制转换  十进制转二进制
  0.1   0是整数位 1是小数位
*/



// 整数位  当前位值 * 2^(n-1)
// 小数位 当前值不停的乘2取整

//  0.1 转为二进制   0. 00011001100110011.........
// 0.1 * 2 = 0.2 无整数  0
// 0.2 *2 = 0.4 无整数   0 <------------
// 0.4 *2 = 0.8 无整数   0             |
// 0.8 *2 = 1.6 有整数   1  余0.6      |
// 0.6 *2 = 1.2 有整数   1  余0.2  ------

console.log(0.1.toString(2))   //0.0001100110011001100110011001100110011001100110011001101 双精度浮点数 在机内占8个字节, 比真是0.1大一些
console.log(0.2.toString(2))   //0.001100110011001100110011001100110011001100110011001101 双精度浮点数, 比真是0.2大一些



// 相加 0.0100110011001100110011001100110011001100110011001100111
// 转换为十进制  0.30000000000000004


// 将0.1和0.2转换为二进制时出现了偏差

/*
// parseInt(string, radix)
@param {string} 必需。要被解析的字符串。
@param {radix} 可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。
*/

console.log(parseInt('1010', 2))